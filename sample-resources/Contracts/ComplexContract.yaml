---
apiVersion: kontract.expedio.xyz/v1alpha1
kind: Contract
metadata:
  name: complex-contract
spec:
  contractName: BlockchainStocks
  networkRefs:
    - holesky
    - amoy
    - sepolia
  walletRef: dev-wallet
  initParams:
    - "https://expedio.xyz/metadata"
    - "0x1234567890abcdef1234567890abcdef12345678"
    - "100000"
    - "1000000000000000000"
  externalModules:
    - "OpenZeppelin/openzeppelin-contracts@v4.8.3"
  localModules:
    - name: dividend
  code: |
    // SPDX-License-Identifier: Unlicense

    pragma solidity ^0.8.9;

    import "lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol";
    import "lib/openzeppelin-contracts/contracts/access/Ownable.sol";
    import "lib/openzeppelin-contracts/contracts/security/Pausable.sol";
    import "lib/openzeppelin-contracts/contracts/token/ERC1155/extensions/ERC1155Supply.sol";
    import "src/dividend/Dividend.sol";

    contract BlockchainStocks is ERC1155, Ownable, Pausable, ERC1155Supply, Dividend {

        uint8 public constant Stock = 1;
        uint256 public maxSupply;
        uint256 public mintPrice;
        address payable private companyWallet;

        mapping(address => bool) private whitelist;

        constructor(
            string memory initURI,
            address payable initCompanyWallet,
            uint256 initMaxSupply,
            uint256 initMintPrice
        ) ERC1155(initURI) {
            setCompanyWallet(initCompanyWallet);
            setMaxSupply(initMaxSupply);
            setMintPrice(initMintPrice);
        }

        function setCompanyWallet(address payable newCompanyWallet) public onlyOwner {
            companyWallet = newCompanyWallet;
        }

        function getCompanyWallet() public view returns (address payable) {
            return companyWallet;
        }

        function setMaxSupply(uint256 newMaxSupply) public onlyOwner {
            maxSupply = newMaxSupply;
        }

        function getMaxSupply() public view returns (uint256) {
            return maxSupply;
        }

        function setMintPrice(uint256 newMintPrice) public onlyOwner {
            mintPrice = newMintPrice;
        }

        function getMintPrice() public view returns (uint256) {
            return mintPrice;
        }

        function mintStocks(uint256 amount) public payable {
            require(amount > 0, "Amount must be greater than zero");
            require(totalSupply(Stock) + amount <= maxSupply, "Exceeds max supply");
            require(msg.value >= mintPrice * amount, "Insufficient payment");

            _mint(msg.sender, Stock, amount, "");
            companyWallet.transfer(msg.value);
        }

        function totalShares() public view override returns (uint256) {
            return totalSupply(Stock);
        }

        function sharesOf(address account) public view override returns (uint256) {
            return balanceOf(account, Stock);
        }

        function addToWhitelist(address newAddress) public onlyOwner {
            whitelist[newAddress] = true;
        }

        function isInWhitelist(
            address addressToValidate
        ) public view returns (bool) {
            if (whitelist[addressToValidate]) {
                return true;
            } else {
                return false;
            }
        }

        function _beforeTokenTransfer(
            address operator,
            address from,
            address to,
            uint256[] memory ids,
            uint256[] memory amounts,
            bytes memory data
        )
            internal
            override(ERC1155, ERC1155Supply)
            whenNotPaused
        {
            super._beforeTokenTransfer(operator, from, to, ids, amounts, data);
            require(isInWhitelist(to), "Account not in whitelist");
        }

        function _afterTokenTransfer(
            address operator,
            address from,
            address to,
            uint256[] memory ids,
            uint256[] memory amounts,
            bytes memory data
        ) internal override(ERC1155) {
            super._afterTokenTransfer(operator, from, to, ids, amounts, data);
            updateDividendReleasedAfterTransfer(from, to, amounts[0]);
        }
    }

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: dividend
data:
  Dividend.sol: |
    // SPDX-License-Identifier: Unlicense
    pragma solidity ^0.8.9;

    abstract contract Dividend {
        event DividendReleased(address to, uint256 amount);
        mapping(address => uint256) private _dividendReleased;
        uint256 private _totalDividendReleased;

        function updateDividendReleasedAfterTransfer(
            address from,
            address to,
            uint256 amount
        ) internal {
            uint256 _fromReleased = _dividendReleased[from];
            uint256 _fromBalance = sharesOf(from);
            if (to == address(0)) // Burning
            {
                uint256 _releasedPerToken = releasedPerToken(
                    _fromReleased,
                    _fromBalance,
                    amount
                );
                _dividendReleased[from] = _releasedPerToken * _fromBalance;
            } else if (from == address(0)) // Minting
            {
                _dividendReleased[to] = _dividendReleased[to];
            }
            else {
                uint256 _releasedPerToken = releasedPerToken(
                    _fromReleased,
                    _fromBalance,
                    amount
                );
                _dividendReleased[from] = (_releasedPerToken) * _fromBalance;
                _dividendReleased[to] =
                    _dividendReleased[to] +
                    ((_releasedPerToken) * amount);
            }
        }

        function releasedPerToken(
            uint256 _fromReleased,
            uint256 _fromBalance,
            uint256 _amountTransfered
        ) internal pure returns (uint256) {
            uint256 _releasedPerToken = _fromReleased /
                (_amountTransfered + _fromBalance) +
                1;
            return _releasedPerToken;
        }

        function dividendRelease() public virtual {
            address payable _account = payable(msg.sender);
            require(
                sharesOf(_account) > 0,
                "DividendSplitter: account has no shares"
            );
            uint256 payment = releasableDividends(_account);
            require(payment != 0, "DividendSplitter: account is not due payment");

            _totalDividendReleased += payment;
            unchecked {
                _dividendReleased[_account] += payment;
            }

            _account.transfer(payment);
            emit DividendReleased(_account, payment);
        }

        function releasableDividends(
            address account
        ) public view returns (uint256) {
            uint256 totalReceived = address(this).balance + totalDividendReleased();
            return
                _pendingDividendPayment(
                    account,
                    totalReceived,
                    dividendReleased(account)
                );
        }

        function _pendingDividendPayment(
            address account,
            uint256 totalReceived,
            uint256 alreadyReleased
        ) internal view returns (uint256) {
            uint256 _totalShares = totalShares();
            uint256 _accountShares = sharesOf(account);
            require(_totalShares != 0, "DividendSplitter: No shares yet");
            uint256 allowedToRelease = (totalReceived * _accountShares) /
                _totalShares;
            if (allowedToRelease > alreadyReleased) {
                uint256 pendingPayment = allowedToRelease - alreadyReleased;
                return pendingPayment;
            }
            else {
                return 0;
            }
        }

        function dividendReleased(address account) public view returns (uint256) {
            return _dividendReleased[account];
        }

        function totalDividendReleased() public view returns (uint256) {
            return _totalDividendReleased;
        }

        function totalShares() public view virtual returns (uint256);

        function sharesOf(address account) public view virtual returns (uint256);
    }
