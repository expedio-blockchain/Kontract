apiVersion: kontract.expedio.xyz/v1alpha1
kind: Contract
metadata:
  labels:
    app.kubernetes.io/name: kubebuilder
    app.kubernetes.io/managed-by: kustomize
  name: contract-sample
spec:
  import: false
  importContractAddress: 0x... # only if import is true
  contractName: MySmartContract
  networkRefs:
    - ethereum-mainnet
  walletRef: my-wallet
  code: |
    // SPDX-License-Identifier: MIT
    pragma solidity ^0.8.0;
    contract MySmartContract {
      uint256 public value;
      function setValue(uint256 newValue) public {
        value = newValue;
      }
    }
  script: |
    // SPDX-License-Identifier: MIT
    pragma solidity ^0.8.0;
    import "forge-std/Script.sol";
    import "../src/MySmartContract.sol";
    contract MySmartContractScript is Script {
      function run() external {
        vm.startBroadcast();
        new MySmartContract();
        vm.stopBroadcast();
      }
    }
  test: |
    // SPDX-License-Identifier: MIT
    pragma solidity ^0.8.0;
    import "ds-test/test.sol";
    import "../MySmartContract.sol";
    contract MySmartContractTest is DSTest {
      MySmartContract myContract;
      function setUp() public {
        myContract = new MySmartContract();
      }
      function testInitialValue() public {
        assertEq(myContract.value(), 0);
      }
    }
  initParams:
    - "param1"
    - "param2"
  externalModules:
    - "OpenZeppelin/openzeppelin-contracts@v4.8.2"
  localModules:
    - name: dividend
status:
  contractAddress: 0x...
  deploymentTime: 2024-09-01T00:00:00Z
  transactionHash: 0x...
  test: passed
  state: deployed
